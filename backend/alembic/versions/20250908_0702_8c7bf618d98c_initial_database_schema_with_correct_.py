"""Initial database schema with correct timestamps.

Revision ID: 8c7bf618d98c
Revises:
Create Date: 2025-09-08 07:02:44.353766

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "8c7bf618d98c"  # pragma: allowlist secret
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "account_types",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("slug", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "parser_config", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint("slug ~* '^[a-z0-9_-]+$'", name="account_types_slug_format"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_index(
        "idx_account_types_parser_config",
        "account_types",
        ["parser_config"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index("idx_account_types_slug", "account_types", ["slug"], unique=False)
    op.create_table(
        "institutions",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("slug", sa.String(length=100), nullable=False),
        sa.Column("website", sa.String(length=255), nullable=True),
        sa.Column("logo_url", sa.String(length=255), nullable=True),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint("slug ~* '^[a-z0-9_-]+$'", name="institutions_slug_format"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_index("idx_institutions_slug", "institutions", ["slug"], unique=False)
    op.create_table(
        "users",
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'",
            name="users_email_valid",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index("idx_users_active", "users", ["is_active"], unique=False)
    op.create_index("idx_users_email", "users", ["email"], unique=False)
    op.create_table(
        "accounts",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("institution_id", sa.UUID(), nullable=False),
        sa.Column("account_type_id", sa.UUID(), nullable=False),
        sa.Column("account_number_hash", sa.String(length=255), nullable=False),
        sa.Column("nickname", sa.String(length=255), nullable=True),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint("currency ~* '^[A-Z]{3}$'", name="accounts_currency_valid"),
        sa.ForeignKeyConstraint(
            ["account_type_id"], ["account_types.id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["institution_id"], ["institutions.id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "account_number_hash"),
    )
    op.create_index(
        "idx_accounts_account_type_id", "accounts", ["account_type_id"], unique=False
    )
    op.create_index("idx_accounts_active", "accounts", ["is_active"], unique=False)
    op.create_index(
        "idx_accounts_institution_id", "accounts", ["institution_id"], unique=False
    )
    op.create_index("idx_accounts_user_id", "accounts", ["user_id"], unique=False)
    op.create_table(
        "statements",
        sa.Column("account_id", sa.UUID(), nullable=False),
        sa.Column("period_start", sa.Date(), nullable=False),
        sa.Column("period_end", sa.Date(), nullable=False),
        sa.Column("file_pdf_url", sa.String(length=255), nullable=True),
        sa.Column("file_csv_url", sa.String(length=255), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column(
            "processing_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "uploaded_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("processed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('pending', 'processing', 'completed', 'failed')",
            name="statements_status_valid",
        ),
        sa.CheckConstraint(
            "file_pdf_url IS NOT NULL OR file_csv_url IS NOT NULL",
            name="statements_files_required",
        ),
        sa.CheckConstraint(
            "period_end >= period_start", name="statements_period_valid"
        ),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_id", "period_start", "period_end"),
    )
    op.create_index(
        "idx_statements_account_id", "statements", ["account_id"], unique=False
    )
    op.create_index(
        "idx_statements_period",
        "statements",
        ["period_start", "period_end"],
        unique=False,
    )
    op.create_index(
        "idx_statements_processing_metadata",
        "statements",
        ["processing_metadata"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index("idx_statements_status", "statements", ["status"], unique=False)
    op.create_index(
        "idx_statements_uploaded_at", "statements", ["uploaded_at"], unique=False
    )
    op.create_table(
        "credit_card_details",
        sa.Column("account_id", sa.UUID(), nullable=False),
        sa.Column("statement_id", sa.UUID(), nullable=False),
        sa.Column("credit_limit", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column("available_credit", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column("points_earned", sa.Integer(), nullable=False),
        sa.Column("points_redeemed", sa.Integer(), nullable=False),
        sa.Column("cash_advances", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column("fees", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column("purchases", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column("credits", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "available_credit <= credit_limit", name="cc_details_available_credit_valid"
        ),
        sa.CheckConstraint(
            "credit_limit >= 0", name="cc_details_credit_limit_positive"
        ),
        sa.CheckConstraint(
            "points_earned >= 0 AND points_redeemed >= 0",
            name="cc_details_points_non_negative",
        ),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["statement_id"], ["statements.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("statement_id"),
    )
    op.create_index(
        "idx_cc_details_account_id", "credit_card_details", ["account_id"], unique=False
    )
    op.create_index(
        "idx_cc_details_statement_id",
        "credit_card_details",
        ["statement_id"],
        unique=False,
    )
    op.create_table(
        "statement_details",
        sa.Column("statement_id", sa.UUID(), nullable=False),
        sa.Column("previous_balance", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column("new_balance", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column("minimum_payment", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column("due_date", sa.Date(), nullable=True),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["statement_id"], ["statements.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("statement_id"),
    )
    op.create_index(
        "idx_statement_details_due_date",
        "statement_details",
        ["due_date"],
        unique=False,
    )
    op.create_index(
        "idx_statement_details_statement_id",
        "statement_details",
        ["statement_id"],
        unique=False,
    )
    op.create_table(
        "transactions",
        sa.Column("statement_id", sa.UUID(), nullable=False),
        sa.Column("account_id", sa.UUID(), nullable=False),
        sa.Column("transaction_date", sa.Date(), nullable=False),
        sa.Column("amount", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("custom_description", sa.Text(), nullable=True),
        sa.Column("category", sa.String(length=100), nullable=True),
        sa.Column("transaction_type", sa.String(length=50), nullable=False),
        sa.Column("reference_id", sa.String(length=255), nullable=True),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "transaction_type IN ('debit', 'credit', 'payment', 'refund')",
            name="transactions_type_valid",
        ),
        sa.CheckConstraint("amount != 0", name="transactions_amount_not_zero"),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["statement_id"], ["statements.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_transactions_account_id", "transactions", ["account_id"], unique=False
    )
    op.create_index("idx_transactions_amount", "transactions", ["amount"], unique=False)
    op.create_index(
        "idx_transactions_category", "transactions", ["category"], unique=False
    )
    op.create_index(
        "idx_transactions_custom_description_search",
        "transactions",
        ["custom_description"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"custom_description": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_transactions_date", "transactions", ["transaction_date"], unique=False
    )
    op.create_index(
        "idx_transactions_description_search",
        "transactions",
        ["description"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"description": "gin_trgm_ops"},
    )
    op.create_index(
        "idx_transactions_statement_id", "transactions", ["statement_id"], unique=False
    )
    op.create_index(
        "idx_transactions_type", "transactions", ["transaction_type"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_transactions_type", table_name="transactions")
    op.drop_index("idx_transactions_statement_id", table_name="transactions")
    op.drop_index(
        "idx_transactions_description_search",
        table_name="transactions",
        postgresql_using="gin",
        postgresql_ops={"description": "gin_trgm_ops"},
    )
    op.drop_index("idx_transactions_date", table_name="transactions")
    op.drop_index(
        "idx_transactions_custom_description_search",
        table_name="transactions",
        postgresql_using="gin",
        postgresql_ops={"custom_description": "gin_trgm_ops"},
    )
    op.drop_index("idx_transactions_category", table_name="transactions")
    op.drop_index("idx_transactions_amount", table_name="transactions")
    op.drop_index("idx_transactions_account_id", table_name="transactions")
    op.drop_table("transactions")
    op.drop_index("idx_statement_details_statement_id", table_name="statement_details")
    op.drop_index("idx_statement_details_due_date", table_name="statement_details")
    op.drop_table("statement_details")
    op.drop_index("idx_cc_details_statement_id", table_name="credit_card_details")
    op.drop_index("idx_cc_details_account_id", table_name="credit_card_details")
    op.drop_table("credit_card_details")
    op.drop_index("idx_statements_uploaded_at", table_name="statements")
    op.drop_index("idx_statements_status", table_name="statements")
    op.drop_index(
        "idx_statements_processing_metadata",
        table_name="statements",
        postgresql_using="gin",
    )
    op.drop_index("idx_statements_period", table_name="statements")
    op.drop_index("idx_statements_account_id", table_name="statements")
    op.drop_table("statements")
    op.drop_index("idx_accounts_user_id", table_name="accounts")
    op.drop_index("idx_accounts_institution_id", table_name="accounts")
    op.drop_index("idx_accounts_active", table_name="accounts")
    op.drop_index("idx_accounts_account_type_id", table_name="accounts")
    op.drop_table("accounts")
    op.drop_index("idx_users_email", table_name="users")
    op.drop_index("idx_users_active", table_name="users")
    op.drop_table("users")
    op.drop_index("idx_institutions_slug", table_name="institutions")
    op.drop_table("institutions")
    op.drop_index("idx_account_types_slug", table_name="account_types")
    op.drop_index(
        "idx_account_types_parser_config",
        table_name="account_types",
        postgresql_using="gin",
    )
    op.drop_table("account_types")
    # ### end Alembic commands ###
