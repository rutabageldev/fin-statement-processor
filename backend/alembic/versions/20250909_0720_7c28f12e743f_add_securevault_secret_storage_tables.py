"""Add SecureVault secret storage tables.

Revision ID: 7c28f12e743f  # pragma: allowlist secret
Revises: 8c7bf618d98c  # pragma: allowlist secret
Create Date: 2025-09-09 07:20:25.962844

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "7c28f12e743f"  # pragma: allowlist secret
down_revision = "8c7bf618d98c"  # pragma: allowlist secret
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "secret_audit_log",
        sa.Column(
            "secret_name",
            sa.String(length=255),
            nullable=False,
            comment="Name of the secret that was accessed",
        ),
        sa.Column(
            "action",
            sa.String(length=50),
            nullable=False,
            comment="Action performed: READ, WRITE, ROTATE, DELETE",
        ),
        sa.Column(
            "user_id",
            sa.Uuid(),
            nullable=True,
            comment="User who performed the action (if authenticated)",
        ),
        sa.Column(
            "ip_address",
            postgresql.INET(),
            nullable=True,
            comment="IP address of the request",
        ),
        sa.Column("user_agent", sa.Text(), nullable=True, comment="User agent string"),
        sa.Column(
            "timestamp",
            sa.DateTime(),
            nullable=False,
            comment="When the action occurred",
        ),
        sa.Column(
            "details",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Additional context about the operation",
        ),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_secret_audit_log_secret_name"),
        "secret_audit_log",
        ["secret_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_secret_audit_log_timestamp"),
        "secret_audit_log",
        ["timestamp"],
        unique=False,
    )
    op.create_table(
        "secrets",
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="Unique secret name/key",
        ),
        sa.Column(
            "encrypted_value",
            sa.Text(),
            nullable=False,
            comment="AES-256-GCM encrypted secret value",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Human-readable description of the secret",
        ),
        sa.Column(
            "rotation_policy",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="JSON policy for automatic rotation",
        ),
        sa.Column(
            "access_count",
            sa.Integer(),
            nullable=False,
            comment="Number of times this secret has been accessed",
        ),
        sa.Column(
            "last_accessed_at",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp of last secret access",
        ),
        sa.Column(
            "key_fingerprint",
            sa.String(length=16),
            nullable=True,
            comment="Fingerprint of master key used for encryption",
        ),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_secrets_name"), "secrets", ["name"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_secrets_name"), table_name="secrets")
    op.drop_table("secrets")
    op.drop_index(op.f("ix_secret_audit_log_timestamp"), table_name="secret_audit_log")
    op.drop_index(
        op.f("ix_secret_audit_log_secret_name"), table_name="secret_audit_log"
    )
    op.drop_table("secret_audit_log")
    # ### end Alembic commands ###
